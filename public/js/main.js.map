{"version":3,"sources":["app/app.module.js","app/app.routes.js","app/components/node/nodeChildDirective.js","app/components/node/nodeController.js","app/components/node/nodeDirective.js","app/components/node/nodeService.js","app/components/node/nodeTreeDirective.js","app/components/document/documentController.js","app/components/document/documentService.js","app/components/documents/documentsController.js","app/components/editable/editableController.js","app/components/editable/editableDirective.js","app/components/template/templateController.js","app/components/template/templateService.js"],"names":[],"mappingshCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["/** CV App Module */\n\nvar cvApp = angular.module('cvApp', ['ui.router', 'ui.bootstrap', 'ui.ace', 'xeditable']);\n\ncvApp.config(function($interpolateProvider) {\n    $interpolateProvider.startSymbol('[[');\n    $interpolateProvider.endSymbol(']]');\n});\n\ncvApp.run(function(editableOptions) {\n    editableOptions.theme = 'bs3'; // bootstrap3 theme\n});\n","/** Angular UI Routing Config */\n\ncvApp.config( function($stateProvider, $urlRouterProvider) {\n    $stateProvider\n        .state('documents', {\n            url: '/',\n            controller: 'DocumentsController',\n            controllerAs : 'documentsCtrl',\n            templateUrl: 'documents/documents.html',\n            resolve: {\n                documents: function(DocumentService, documentsData){\n                    var documentResult = [];\n                    var documentsDataData = documentsData.data;\n                    for(documentName in documentsDataData){\n                        documentResult.push({\n                            name: documentName,\n                            data: documentsDataData[documentName]\n                        });\n                    }\n                    return documentResult;\n                },\n                documentsData: function(DocumentService){\n                    return DocumentService.getDocuments();\n                }\n            }\n        })\n        .state('documents.new', {\n            url: 'new',\n            templateUrl: 'document/document-new.html',\n            controller: 'DocumentController',\n            controllerAs : 'documentCtrl',\n            resolve: {\n                documentName: function(){\n                    return '';\n                },\n                documentData: function(){\n                    return '';\n                }\n            }\n        })\n        .state('documents.document', {\n            abstract: true,\n            url: ':document_name',\n            templateUrl: 'document/document.html',\n            resolve: {\n                documentName: function($stateParams){\n                    return $stateParams.document_name;\n                },\n                documentDataPromise: function($stateParams, DocumentService){\n                    return DocumentService.getDocument($stateParams.document_name);\n                },\n                templatePromise: function($stateParams, TemplateService){\n                    return TemplateService.getTemplate($stateParams.document_name+'-templates');\n                },\n                documentData: function(documentDataPromise, templatePromise, TemplateService){\n                    // Preload the template cache with the templates for this document\n                    var templates = templatePromise.data;\n                    TemplateService.preloadCache(templates);\n                    return documentDataPromise.data;\n                }\n            }\n        })\n        .state('documents.document.view', {\n            url: '/view',\n            views: {\n                'name@documents.document': {\n                    templateUrl: 'document/document-view-name.html',\n                    controller: 'DocumentController',\n                    controllerAs : 'documentCtrl'\n                },\n                'data@documents.document': {\n                    templateUrl: 'document/document-data.html',\n                    controller: 'DocumentController',\n                    controllerAs : 'documentCtrl'\n                }\n            }\n        }).state('documents.document.edit', {\n            url: '/edit',\n            views: {\n                'name@documents.document': {\n                    templateUrl: 'document/document-edit-name.html',\n                    controller: 'DocumentController',\n                    controllerAs : 'documentCtrl'\n                },\n                'data@documents.document': {\n                    templateUrl: 'document/document-data.html',\n                    controller: 'DocumentController',\n                    controllerAs : 'documentCtrl'\n                }\n            }\n        });\n\n    $urlRouterProvider.otherwise(\"/\");\n});\n","cvApp.directive('nodeChild', function() {\n    return {\n        templateUrl: 'node/node-child.html',\n        transclude: true,\n        replace: true,\n        restrict: 'E'\n    };\n});","/** Node Controller */\n\ncvApp.controller('NodeController', ['NodeService', 'nodeData', function(NodeService, nodeData){\n    var nodeCtrl = this;\n\n    this.nodeData = nodeData;\n}]);\n","\ncvApp.directive('node', ['$compile', '$templateCache', function($compile, $templateCache) {\n    return {\n        replace: true,\n        restrict: 'E',\n        template: '<div ng-include=\"getTemplateUrl()\"></div>',\n        link: function($scope, elm) {\n            var grandparentNodePath = $scope.$parent.$parent.nodePath;\n            if (typeof grandparentNodePath == 'undefined'){\n                grandparentNodePath = '';\n            }\n            $scope.nodePath = grandparentNodePath + '/' + $scope.nodeKey;\n            // Define dynamic template function\n            $scope.getTemplateUrl = function(){\n                // Try the exact path\n                if ($templateCache.get(this.nodePath)){\n                    return this.nodePath;\n                }\n                // If the path ends with a number, try the default (\"_\")\n                var defaultPath = this.nodePath.replace(/\\/\\d+$/, '/_');\n                if (defaultPath != this.nodePath && $templateCache.get(defaultPath)){\n                    return defaultPath;\n                }\n                return 'node/node.html';\n            };\n            // Assign helper functions\n            $scope.isNumber = angular.isNumber;\n            $scope.isCollection = function(item){\n                return angular.isArray(item) || angular.isObject(item);\n            }\n        }\n    };\n}]);","/**\n * Service to provide Node Data\n */\n\ncvApp.service('NodeService', ['$http', function($http) {\n    this.getNode = function (documentName, nodePath) {\n        // Remove any leading slash from path\n        nodePath = nodePath.replace(/^\\//, '');\n        return $http.get('/api/' + documentName + '/' + nodePath);\n    }\n    this.getNodeTemplate = function (documentName, nodePath) {\n        // Remove any leading slash from path\n        nodePath = nodePath.replace(/^\\//, '');\n        return $http.get('/api/' + documentName + '-templates/' + nodePath);\n    }\n}]);\n","cvApp.directive('nodeTree', ['$modal', '$stateParams', 'TemplateService', function($modal, $stateParams, TemplateService) {\n    return {\n        templateUrl: 'node/node-tree.html',\n        transclude: true,\n        replace: true,\n        restrict: 'E',\n        scope: {\n            node: '=',\n            nodePath: '@',\n            editing: '='\n        },\n        link: function($scope, elm) {\n\n            /**\n             * Open a modal to edit the template\n             *\n             * @param path\n             */\n            $scope.openTemplateModal = function (nodePath) {\n                var modalInstance = $modal.open({\n                    templateUrl: 'template/modal.html',\n                    controller: 'TemplateController',\n                    size: 'lg',\n                    resolve: {\n                        templatePromise: function($stateParams, TemplateService){\n                            return TemplateService.getTemplate($stateParams.document_name+'-templates', nodePath);\n                        },\n                        nodePath: function(){\n                            return nodePath;\n                        }\n                    }\n                });\n                modalInstance.result.then(function (templateData) {\n                    //console.log(templateData, \"RESULT\");\n                });\n            };\n        }\n    }\n}]);","/** Document Controller */\n\ncvApp.controller('DocumentController', ['DocumentService', 'documentName', 'documentData', 'editableOptions', '$state', '$modal', function(DocumentService, documentName, documentData, editableOptions, $state, $modal){\n    var documentCtrl = this;\n\n    // Set the editing flag based on current state\n    this.editing = $state.current.name == 'documents.document.edit';\n\n    // Disable xeditable activation if we are not editing\n    if (this.editing){\n        editableOptions.activationEvent = 'click';\n    } else {\n        editableOptions.activationEvent = 'none';\n    }\n\n    this.document = {\n        name: documentName,\n        data: documentData\n    };\n\n    /**\n     * Create a document with the given name\n     *\n     * @param documentName\n     */\n    this.createDocument = function() {\n        var documentName = documentCtrl.document.name;\n        var documentData = documentCtrl.document.data;\n        DocumentService.createDocument(documentName, documentData).success(function(data){\n            documentCtrl.document = {\n                name: '',\n                data: ''\n            };\n        }).success(\n            function(){\n                $state.go('documents', {}, {\n                    reload: true\n                });\n            }\n        );\n\n    }\n\n}]);\n","/**\n * Service to provide Document Data\n */\n\ncvApp.service('DocumentService', ['$http', function($http) {\n    var documentService = this;\n\n    this.getDocuments = function () {\n        return $http.get('/api');\n    }\n\n    this.getDocument = function (documentName) {\n        return $http.get('/api/' + documentName);\n    }\n\n    this.createDocument = function (documentName, documentData) {\n        return $http.put('/api/' + documentName, documentData);\n    }\n\n}]);\n\n","/** Documents Controller */\n\ncvApp.controller('DocumentsController', ['documents',  function(documents){\n    var documentsCtrl = this;\n\n    this.documents = documents;\n\n}]);\n","/** Editable Controller */\n\ncvApp.controller('EditableController', [function(){\n    var editableCtrl = this;\n}]);\n","cvApp.directive('editable', ['$state',function($state) {\n    return {\n        restrict: 'E',\n        controller: 'EditableController',\n        controllerAs: 'editableCtrl',\n        templateUrl: function(elem, attrs){\n            // If we are not editing, use the noedit template\n            var type = 'noedit';\n            if ($state.current.name == 'documents.document.edit') {\n                // If we are editing, the default type is text\n                type = 'text';\n                if (typeof attrs.type != 'undefined') {\n                    type = attrs.type;\n                }\n            }\n            return 'editable/editable-'+type+'.html';\n        },\n        link: {\n            pre:function($scope, elm, attrs) {\n                $scope.fieldKey = attrs.fieldKey;\n            }\n        }\n    };\n}]);","/** Template Controller */\n\ncvApp.controller('TemplateController', ['$scope', 'TemplateService', '$modalInstance', 'templatePromise', 'nodePath', function($scope, TemplateService, $modalInstance, templatePromise, nodePath){\n    var templateCtrl = this;\n\n    $scope.nodePath = nodePath;\n    $scope.templateData = templatePromise.data;\n    // Check for the \"template\" key in the data\n    if ($scope.templateData.template){\n        $scope.templateHtml = $scope.templateData.template;\n    }\n\n    //console.log($scope.nodePath, \"NODE PATH\");\n    //console.log($scope.templateData, \"TEMPLATE DATA\");\n    //console.log($scope.templateHtml, \"TEMPLATE HTML\");\n\n    $scope.aceLoaded = function(_editor){\n        _editor.$blockScrolling = Infinity;\n        // Re-format the html\n        $scope.templateHtml = html_beautify($scope.templateHtml);\n    };\n\n    $scope.ok = function () {\n        $modalInstance.close($scope.templateHtml);\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n\n}]);\n","/**\n * Service to provide Template Data\n */\n\ncvApp.service('TemplateService', ['$http', '$templateCache', function($http, $templateCache) {\n    var templateService = this;\n\n    this.getTemplate = function (templateName, templatePath) {\n        if (typeof templatePath == 'undefined'){\n            templatePath = '';\n        } else {\n            // Remove any leading slash from path\n            templatePath = templatePath.replace(/^\\//, '');\n        }\n        return $http.get('/api/' + templateName + '/' + templatePath);\n    }\n\n    this.createTemplate = function (templateName, templateData) {\n        return $http.put('/api/' + templateName, templateData);\n    }\n\n    this.preloadCache = function(jsonData, path) {\n        // To start off, set the path to en empty string, and add the node-child template to the cache\n        if (typeof path == 'undefined'){\n            path = '';\n            $http.get('node/node-child.html').success(function(data){\n                $templateCache.put('node/node-child.html', data);\n            });\n        }\n        if( typeof jsonData == \"object\" ) {\n            $.each(jsonData, function(key,val) {\n                // if the key is template, add the value to the cache at this path\n                if (key == 'template'){\n                    $templateCache.put(path, val);\n                } else {\n                    templateService.preloadCache(val, String(path) + '/' + String(key));\n                }\n            });\n        }\n    }\n}]);\n\n"],"sourceRoot":"/source/"}